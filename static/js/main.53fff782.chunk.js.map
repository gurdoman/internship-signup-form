{"version":3,"sources":["components/header/Header.js","components/signup-form/Signup.js","components/thank-you-message/Thanks.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Signup","props","handleSubmit","event","state","emailValid","email","interest","submit","setState","simulateRequest","preventDefault","validateEmail","target","value","match","handleChange","setTimeout","saveUser","this","onSubmit","htmlFor","id","type","onChange","placeholder","disabled","hidden","Component","Thanks","App","console","log","userData","sessionStorage","setItem","JSON","stringify","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVAGe,SAASA,IACtB,OACE,yBAAKC,UAAU,UACb,wBAAIA,UAAU,gBAAd,0BACA,yBAAKA,UAAU,qB,UCJAC,E,YACnB,WAAYC,GAAO,IAAD,8BAChB,4CAAMA,KASRC,aAAe,SAACC,GACX,EAAKC,MAAMC,YAAmC,KAArB,EAAKD,MAAME,OAAwC,KAAxB,EAAKF,MAAMG,WAAoB,EAAKH,MAAMI,SAC/F,EAAKC,SAAS,CAACD,QAAQ,IACvB,EAAKE,mBAGPP,EAAMQ,kBAhBU,EAmBlBC,cAAgB,SAACT,GACf,IAAIG,EAAQH,EAAMU,OAAOC,MACrBT,EAAaC,EAAMS,MAAM,yCAAqD,KAAVT,EACxE,EAAKG,SAAS,CACZH,QACAD,gBAxBc,EA4BlBW,aAAe,SAACb,GACd,IAAII,EAAWJ,EAAMU,OAAOC,MAC5B,EAAKL,SAAS,CAACF,cA9BC,EAiClBG,gBAAkB,WAChBO,YAAW,kBAAM,EAAKhB,MAAMiB,SAAS,EAAKd,MAAME,MAAO,EAAKF,MAAMG,YAAW,MAhC7E,EAAKH,MAAM,CACTE,MAAO,GACPD,YAAY,EACZE,SAAU,GACVC,QAAS,GANK,E,sEAsCR,IAAD,EACuCW,KAAKf,MAA5CE,EADA,EACAA,MAAOD,EADP,EACOA,WAAYE,EADnB,EACmBA,SAAUC,EAD7B,EAC6BA,OACpC,OACE,yBAAKT,UAAU,QACb,uBAAGA,UAAU,aAAb,kIACA,0BAAMqB,SAAUD,KAAKjB,aAAcH,UAAU,eAC3C,yBAAKA,UAAU,aACb,yBAAKA,UAAU,wBACb,2BACEsB,QAAQ,QACRtB,UAAU,cACPM,EAAa,GAAK,uCAEvB,2BACEiB,GAAG,QACHC,KAAK,QACLxB,UAAW,0BAA6BM,EAAa,GAAK,WAC1DS,MAAOR,EACPkB,SAAUL,KAAKP,cACfa,YAAY,0BAGhB,4BAAQ1B,UAAU,2BAA2Be,MAAOP,EAAUiB,SAAUL,KAAKH,cAC3E,4BAAQF,MAAM,GAAGY,UAAQ,EAACC,QAAM,GAAhC,kBACA,4BAAQb,MAAM,eAAd,eACA,4BAAQA,MAAM,SAAd,WAGJ,2BACEf,UAAU,cACVwB,KAAK,SACLT,MAAON,EAAS,gBAAkB,6B,GAtEVoB,a,MCArB,SAASC,IACtB,OACE,yBAAK9B,UAAU,eACb,wBAAIA,UAAU,gBAAd,6BACA,uBAAGA,UAAU,kBAAb,iK,ICgCS+B,E,YA/Bb,aAAc,IAAD,8BACX,+CAMFZ,SAAW,SAACZ,EAAOC,GACjBwB,QAAQC,IAAR,iBAAsB1B,GAAtB,oBAA4CC,IAC5C,IAAI0B,EAAW,CACb3B,QACAC,YAEF2B,eAAeC,QAAQ,WAAYC,KAAKC,UAAUJ,IAClD,EAAKxB,SAAS,CAACwB,cAZf,EAAK7B,MAAQ,CACX6B,SAAW,IAHF,E,sEAkBX,OACE,yBAAKlC,UAAU,OACb,kBAAC,EAAD,MAE0B,KAAxBoB,KAAKf,MAAM6B,SACX,kBAAC,EAAD,CAAQf,SAAUC,KAAKD,WACvB,kBAAC,EAAD,W,GA1BQU,aCMEU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS1B,MACvB,2DCbN2B,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.53fff782.chunk.js","sourcesContent":["import React from 'react'\r\nimport './Header.css';\r\n\r\nexport default function Header() {\r\n  return (\r\n    <div className=\"header\">\r\n      <h1 className=\"header-title\">INTERNSHIP SIGNUP FORM</h1>\r\n      <div className=\"header-division\"></div>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\r\nimport './Signup.css';\r\n\r\nexport default class Signup extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state={\r\n      email: \"\",\r\n      emailValid: true,\r\n      interest: \"\",\r\n      submit : false\r\n    }\r\n  }\r\n\r\n  handleSubmit = (event) =>{\r\n    if(this.state.emailValid && this.state.email !== \"\" && this.state.interest !== \"\" && !this.state.submit){\r\n      this.setState({submit: true});\r\n      this.simulateRequest();\r\n    }\r\n      \r\n    event.preventDefault();\r\n  }\r\n\r\n  validateEmail = (event) => {\r\n    let email = event.target.value;\r\n    let emailValid = email.match(/^([\\w.%+-]+)@([\\w-]+\\.)+([\\w]{2,})$/i) || email === \"\";\r\n    this.setState({\r\n      email,\r\n      emailValid\r\n    })\r\n  }\r\n\r\n  handleChange = (event) =>{\r\n    let interest = event.target.value;\r\n    this.setState({interest})\r\n  }\r\n\r\n  simulateRequest = () =>{\r\n    setTimeout(() => this.props.saveUser(this.state.email, this.state.interest), 2000);\r\n  }\r\n\r\n\r\n  render() {\r\n    const {email, emailValid, interest, submit} = this.state;\r\n    return (\r\n      <div className=\"body\">\r\n        <p className=\"paragraph\">Prepare for your career with Project Management, Web-Development, Graphic design, or Digital Marketing Internship at Northern.</p>\r\n        <form onSubmit={this.handleSubmit} className=\"signup-form\">\r\n          <div className=\"form_data\">\r\n            <div className=\"form_email-container\">\r\n              <label \r\n                htmlFor=\"email\" \r\n                className=\"form_error\">\r\n                  {emailValid ? '' : 'Please enter a valid email address.'}\r\n              </label>\r\n              <input \r\n                id=\"email\"\r\n                type=\"email\" \r\n                className={\"form_email form_input \" +  (emailValid ? '' : 'invalid')} \r\n                value={email} \r\n                onChange={this.validateEmail} \r\n                placeholder=\"Your Email Address *\"\r\n              />\r\n            </div>\r\n            <select className=\"form_interest form_input\" value={interest} onChange={this.handleChange}>\r\n              <option value=\"\" disabled hidden>Your Interests</option>\r\n              <option value=\"development\">Development</option>\r\n              <option value=\"sales\">Sales</option>\r\n            </select>\r\n          </div>\r\n          <input \r\n            className=\"form_submit\" \r\n            type=\"submit\" \r\n            value={submit ? \"Submitting...\" : \"Sign Up Now \\u25BA\"} \r\n          />\r\n        </form>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport './Thanks.css';\r\n\r\nexport default function Thanks() {\r\n  return (\r\n    <div className=\"thanks-body\">\r\n      <h2 className=\"thanks_title\">Thanks for your interest!</h2>\r\n      <p className=\"thanks_message\">\r\n        We will review your application and contact you for addition information should your background and experience meet the requirements of one of our openings.\r\n      </p>\r\n    </div>\r\n  )\r\n}\r\n","import React, { Component } from 'react'\nimport './App.css';\nimport Header from './components/header/Header';\nimport Signup from './components/signup-form/Signup';\nimport Thanks from './components/thank-you-message/Thanks';\n\nclass App extends Component {\n\n  constructor(){\n    super();\n    this.state = {\n      userData : \"\"\n    }\n  }\n\n  saveUser = (email, interest) =>{\n    console.log(`Email: ${email}`, `Interest: ${interest}`);\n    let userData = {\n      email,\n      interest\n    }\n    sessionStorage.setItem('userData', JSON.stringify(userData));\n    this.setState({userData});\n  }\n\n  render(){\n    return (\n      <div className=\"app\">\n        <Header />\n        {\n          this.state.userData === \"\" ? \n          <Signup saveUser={this.saveUser} /> : \n          <Thanks />\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}